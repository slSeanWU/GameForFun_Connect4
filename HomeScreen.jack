/* 	This is part of a Connect 4 game made for educational purposes
	as Project 09 of the Nand2Tetris course.
	
	Written by Slayorious */
	
/**	
	Implements the home screen of the Connect 4 game. At the top of this
	screen is a banner with the name of the game. Below it is a number of
	menu options which the players can choose from. These include:
	
	Play Game
	Instructions
	Pick Colors
	Quit
	
	Each of the first three load their complementary page while "Quit"
	exits the program.
*/
	
class HomeScreen
{
	field ConnectFour c4;
	field Instructions instructions;
	field PlayerSetup setup;
	field Player player1;
	field int menuSelect;
	field char dq;
	
	// Creates a new HomeScreen and initializes some necessary variables.
	constructor HomeScreen new()
	{
		let c4 = null;
		let instructions = null;
		let player1 = Player.new();
		let c4 = ConnectFour.new(player1);
		let instructions = Instructions.new();
		let setup = PlayerSetup.new(player1);
		let menuSelect = 0;
		let dq = String.doubleQuote();
		
		return this;
	}
	
	// Runs the menu screen that the player interacts with.
	method void run()
	{
		// Draw the elements of the main screen.
		do HomeScreen.drawHomeScreen(menuSelect);
		
		// In effect this code listens for keyboard input and allows the user to select menu options.
		while (~(Keyboard.keyPressed() = 140))
		{
			if ((Keyboard.keyPressed() = 128) & (menuSelect = 0))
			{
				//let c4 = ConnectFour.new(player1);
				do c4.run();
				//do c4.dispose();
				do HomeScreen.drawHomeScreen(menuSelect);
				do Sys.wait(300);
			}
			if ((Keyboard.keyPressed() = 128) & (menuSelect = 1))
			{
				//let instructions = Instructions.new();
				do instructions.run();
				//do instructions.dispose();
				do HomeScreen.drawHomeScreen(menuSelect);
				do Sys.wait(300);
			}
			if ((Keyboard.keyPressed() = 128) & (menuSelect = 2))
			{
				//let setup = PlayerSetup.new(player1);
				do setup.run();
				//do setup.dispose();
				do HomeScreen.drawHomeScreen(menuSelect);
				do Sys.wait(300);
			}
			if ((Keyboard.keyPressed() = 133) & (menuSelect = 0))
			{
				let menuSelect = 1;
				do HomeScreen.drawMenuSelect(menuSelect);
				do Sys.wait(300);
			}
			if ((Keyboard.keyPressed() = 133) & (menuSelect = 1))
			{
				let menuSelect = 2;
				do HomeScreen.drawMenuSelect(menuSelect);
				do Sys.wait(300);
			}
			if ((Keyboard.keyPressed() = 131) & (menuSelect = 2))
			{
				let menuSelect = 1;
				do HomeScreen.drawMenuSelect(menuSelect);
				do Sys.wait(300);
			}
			if ((Keyboard.keyPressed() = 131) & (menuSelect = 1))
			{
				let menuSelect = 0;
				do HomeScreen.drawMenuSelect(menuSelect);
				do Sys.wait(300);
			}
			do Sys.wait(10);
		}
		
		return;
	}
	
	function void drawHomeScreen(int mS)
	{
		// Draw's the game's banner logo.
		do Screen.clearScreen();
		do Output.moveCursor(3,6);
		do OutputUtil.printStringConst(".oPYo.                                    o       .8  ");
		do Output.moveCursor(4,6);
		do OutputUtil.printStringConst("8    8                                    8      d'8  ");
		do Output.moveCursor(5,6);
		do OutputUtil.printStringConst("8      .oPYo. odYo. odYo. .oPYo. .oPYo.  o8P    d' 8  ");
		do Output.moveCursor(6,6);
		do OutputUtil.printStringConst("8      8    8 8' `8 8' `8 8oooo8 8    '   8    Pooooo ");
		do Output.moveCursor(7,6);
		do OutputUtil.printStringConst("8    8 8    8 8   8 8   8 8.     8    .   8        8  ");
		do Output.moveCursor(8,6);
		do OutputUtil.printStringConst("`YooP' `YooP' 8   8 8   8 `Yooo' `YooP'   8        8  ");
		
		// Draws the game's menu options.
		do Output.moveCursor(13,27);
		do OutputUtil.printStringConst("Play Game");
		do Output.moveCursor(14,26);
		do OutputUtil.printStringConst("Instructions");
		do Output.moveCursor(15,25);
		do OutputUtil.printStringConst("Player Options");
		do HomeScreen.drawMenuSelect(mS);
		
		// Draws the instructions for the page
		do Output.moveCursor(18,18);
		do OutputUtil.printStringConst("Press Enter to select option");
		do Output.moveCursor(19,19);
		do OutputUtil.printStringConst("Press Esc to quit the game");
		
		return;
	}
	
	// Draw's the rectangle that shows which menu item is currently selected.
	function void drawMenuSelect(int mS)
	{
		// Clear the menu chevrons.
		do HomeScreen.clearMenuSelect();
		
		// If the current menu option is the first one draw chevrons around the first menu item.
		if (mS = 0)
		{
			do Output.moveCursor(13,23);
			do OutputUtil.printStringConst(">");
			do Output.moveCursor(13,40);
			do OutputUtil.printStringConst("<");
		}
		
		// If the current menu option is the second one draw chevrons around the second menu item.
		if (mS = 1)
		{
			do Output.moveCursor(14,23);
			do OutputUtil.printStringConst(">");
			do Output.moveCursor(14,40);
			do OutputUtil.printStringConst("<");
		}
		
		// If the current menu option is the third one draw chevrons around the third menu item.
		if (mS = 2)
		{
			do Output.moveCursor(15,23);
			do OutputUtil.printStringConst(">");
			do Output.moveCursor(15,40);
			do OutputUtil.printStringConst("<");
		}
		
		return;
	}
	
	// Clears all the menu slection chevrons.
	function void clearMenuSelect()
	{
		do Output.moveCursor(13,23);
		do OutputUtil.printStringConst(" ");
		do Output.moveCursor(13,40);
		do OutputUtil.printStringConst(" ");
		
		do Output.moveCursor(14,23);
		do OutputUtil.printStringConst(" ");
		do Output.moveCursor(14,40);
		do OutputUtil.printStringConst(" ");
		
		do Output.moveCursor(15,23);
		do OutputUtil.printStringConst(" ");
		do Output.moveCursor(15,40);
		do OutputUtil.printStringConst(" ");
		
		return;
	}
	
	method void dispose()
	{
		do c4.dispose();
		do instructions.dispose();
		do setup.dispose();
		do player1.dispose();
		do Memory.deAlloc(this);
		return;
	}
	/*	Various suitable Connect 4 fonts
	
		888****888888**888888**888888**88888888888888*****888******88888
		
		 .--.                     .    .  . 
		:                        _|_   |  | 
		|    .-. .--. .--. .-. .-.|    '--|-
		:   (   )|  | |  |(.-'(   |       | 
		 `--'`-' '  `-'  `-`--'`-'`-'     ' 
		 
		.oPYo.                                    o       .8  
		8    8                                    8      d'8  
		8      .oPYo. odYo. odYo. .oPYo. .oPYo.  o8P    d' 8  
		8      8    8 8' `8 8' `8 8oooo8 8    '   8    Pooooo 
		8    8 8    8 8   8 8   8 8.     8    .   8        8  
		`YooP' `YooP' 8   8 8   8 `Yooo' `YooP'   8        8  
		
		  ___                                         
		 / (_)                                   |  | 
		|      __   _  _    _  _    _   __ _|_   |__|_
		|     /  \_/ |/ |  / |/ |  |/  /    |       | 
		 \___/\__/   |  |_/  |  |_/|__/\___/|_/     | 
        
		                                           
		,---.                         |        |  |
		|    ,---.,---.,---.,---.,---.|---     `--|
		|    |   ||   ||   ||---'|    |           |
		`---'`---'`   '`   '`---'`---'`---'       `
	*/
}