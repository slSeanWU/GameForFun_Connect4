/* 	This is part of a Connect 4 game made for educational purposes
	as Project 09 of the Nand2Tetris course.
	
	Written by Slayorious */
	
/** 
	Implements the Connect 4 game.
*/

class ConnectFour
{
	field Player player1;
	field Player player2;
	field Board board;
	field Player currentPlayer;		// Alias for player1 or player2.
	field int column;				// Column of the token.
	
	constructor ConnectFour new(Player player)
	{
		let player1 = player;
		let player2 = Player.new();
		let currentPlayer = player1;
		
		let board = Board.new();
		
		return this;
	}
	
	method void initialize()
	{
		let column = 3;				// Initializes the token column to the middle of the board.
		do playerOrder();
		
		do Screen.clearScreen();
		do Output.moveCursor(2,28);
		do OutputUtil.printStringConst("Connect 4");
		do board.drawBoard();
		do board.drawToken(column, 0, currentPlayer.getColor());
		do drawTurn();
		do Output.moveCursor(20,18);
		do OutputUtil.printStringConst("Press Enter to drop your token");
		do Output.moveCursor(21,14);
		do OutputUtil.printStringConst("Press Esc to return to the main menu");
		do Sys.wait(600);
		
		return;
	}
	
	// Runs the Connect 4 game the players interact with.
	method void run()
	{
		var int a, b, c, d, borderSize;			// variables for the victory rectangle.
		
		let a = 126;
		let b = 109;
		let c = 386;
		let d = 176;
		let borderSize = 1;
		
		do initialize();
		
		while (~(Keyboard.keyPressed() = 140))
		{
			if ((Keyboard.keyPressed() = 128) & board.isEmpty(column, 0))
			{
				do board.dropToken(column, currentPlayer.getColor());
				
				// Runs winner code if a winner is found.
				if (board.isWinner())
				{
					// Draw rectangle border for the winner text.
					do Screen.drawRectangle(a, b, c, d);
					
					// Hollow out the rectangle to make a border.
					do Screen.setColor(false);
					do Screen.drawRectangle(a + borderSize, b + borderSize, c - borderSize, d - borderSize);
					do Screen.setColor(true);
					
					do Output.moveCursor(11, 25);
					
					if (currentPlayer.getColor() = player1.getColor())
					{
						do OutputUtil.printStringConst("Player 1 wins!");
					}
					else
					{
						do OutputUtil.printStringConst("Player 2 wins!");
					}
					
					do Output.moveCursor(13, 18);
					do OutputUtil.printStringConst("Press Enter to restart game");
					do Output.moveCursor(14, 19);
					do OutputUtil.printStringConst("Press Esc to exit to menu");
					
					while (~(Keyboard.keyPressed() = 140) & ~(Keyboard.keyPressed() = 128))
					{
						do Sys.wait(10);
					}
					if (Keyboard.keyPressed() = 128)
					{
						do board.reset();
						do initialize();
						do playerOrder();
					}
				}
				else
				{
					do swapPlayer();
				}
				let column = 3;
				do board.drawToken(column, 0, currentPlayer.getColor());
			}
			if ((Keyboard.keyPressed() = 130) & currentPlayer = player2)
			{
				if (column > 0)
				{
					do board.eraseToken(column, 0);
					let column = column - 1;
					do board.drawToken(column, 0, currentPlayer.getColor());
					do Sys.wait(300);
				}
			}
			if ((Keyboard.keyPressed() = 132) & currentPlayer = player2)
			{
				if (column < 6)
				{
					do board.eraseToken(column, 0);
					let column = column + 1;
					do board.drawToken(column, 0, currentPlayer.getColor());
					do Sys.wait(300);
				}
			}
			if ((Keyboard.keyPressed() = 65) & currentPlayer = player1)
			{
				if (column > 0)
				{
					do board.eraseToken(column, 0);
					let column = column - 1;
					do board.drawToken(column, 0, currentPlayer.getColor());
					do Sys.wait(300);
				}
			}
			if ((Keyboard.keyPressed() = 68) & currentPlayer = player1)
			{
				if (column < 6)
				{
					do board.eraseToken(column, 0);
					let column = column + 1;
					do board.drawToken(column, 0, currentPlayer.getColor());
					do Sys.wait(300);
				}
			}
			do Sys.wait(10);
		}
		
		return;
	}
	
	// Sets the next player to the current player.
	method void swapPlayer()
	{
		var int a, b, c, d, e, f, g, h, borderSize;
		
		let a = 39;
		let b = 84;
		let c = 139;
		let d = 184;
		
		let e = 373;
		let f = 84;
		let g = 473;
		let h = 184;
		
		let borderSize = 1;
		
		if (currentPlayer = player1)
		{
			let currentPlayer = player2;
			do drawTurn();
		}
		else
		{
			let currentPlayer = player1;
			do drawTurn();
		}
		
		return;
	}
	
	// Draws the box that shows which player's turn it is.
	method void drawTurn()
	{
		var int a, b, c, d, e, f, g, h, borderSize;
		
		let a = 39;
		let b = 106;
		let c = 139;
		let d = 156;
		
		let e = 373;
		let f = 106;
		let g = 473;
		let h = 156;
		
		let borderSize = 1;
		
		if (currentPlayer = player1)
		{
			do Screen.setColor(false);
			do Screen.drawRectangle(e, f, g, h);
			do Screen.setColor(true);
			do Screen.drawRectangle(a, b, c, d);
			do Screen.setColor(false);
			do Screen.drawRectangle(a + borderSize, b + borderSize, c - borderSize, d - borderSize);
			do Screen.setColor(true);
			do Output.moveCursor(11, 6);
			do OutputUtil.printStringConst("Player 1's");
			do Output.moveCursor(12, 9);
			do OutputUtil.printStringConst("turn");
		}
		else
		{
			do Screen.setColor(false);
			do Screen.drawRectangle(a, b, c, d);
			do Screen.setColor(true);
			do Screen.drawRectangle(e, f, g, h);
			do Screen.setColor(false);
			do Screen.drawRectangle(e + borderSize, f + borderSize, g - borderSize, h - borderSize);
			do Screen.setColor(true);
			do Output.moveCursor(11, 48);
			do OutputUtil.printStringConst("Player 2's");
			do Output.moveCursor(12, 51);
			do OutputUtil.printStringConst("turn");
		}
		
		return;
	}
	
	// Sets the player order.
	method void playerOrder()
	{
		if (player1.getOrder() = 0)
		{
			do player2.setOrder(1);
			let currentPlayer = player1;
		}
		if (player1.getOrder() = 1)
		{
			do player2.setOrder(0);
			let currentPlayer = player2;
		}
		if (player1.getColor() = 0)
		{
			do player2.setColor(1);
		}
		if (player1.getColor() = 1)
		{
			do player2.setColor(0);
		}
		
		return;
	}
	
	method void dispose()
	{
		do player2.dispose();
		do board.dispose();
		do Memory.deAlloc(this);
		return;
	}
}