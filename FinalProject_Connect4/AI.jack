class AI{
	field int color;  	//AI's color
	field int p;  		//player's color
	field Array priority;
	field Grid grid;
	field boolean AIcrashed;
	field int randseed, speakCnt;


	constructor AI new(int c, Grid getGrid){
		let randseed = 0;
		let AIcrashed = 0;
		let speakCnt = 0;
		let grid = getGrid;
		let priority = Array.new(7);
		let priority[0] = 3;
		let priority[1] = 2;
		let priority[2] = 4;
		let priority[3] = 5;
		let priority[4] = 1;
		let priority[5] = 0;
		let priority[6] = 6;
		let color = c;

		if (color = 1){
			let p = 2;
		}else{
			let p = 1;
		}

		return this;
	}



	method int decided(Grid getGrid){

		var int i, j;
		var int toBlock;
		let grid = getGrid;


		do speak();


		if (grid.getSteps() = 0){  //first step is always 3
			return 3;
		}


		let i = Win(color);   //if I will win at the next step, just do it!
		if (i < 7){
			return i;
		}
		

		let toBlock = blockOppo();  //if opponent will win next step, block it!
		if (toBlock < 7){
			return toBlock;
		}


		let i = wannaWin();   //search existing line and trying to increase its length
		if (i < 7){
			return i;
		}


		let i = nineGrid();   //last choice: according to the numbers same color in the 9-grids
		return i;
		
		
	}




	method int blockOppo(){
		var int i;
		
		let i = Win(p);
		if (i < 7){
			return i;
		}

		return BlockHorTwo();  //if there is _ O O _ ("_" means blank), stop it
	}

	method int BlockHorTwo(){
		var int col, row;
		
		let col = 0;
		while(col < 7){

			let row = 0;
			while( row < 6 ){
				if( grid.getRec(col, row) = p ){
					if (col < 6){
						if (judgeHor(col, row, p)){
							if((grid.getStack(col-1) = row) & (grid.getStack(col+2) = row)){
								if ( ((col > 0) & (grid.getRec(col-1, row) = 0)) & ~(grid.getRec(col+2, row) = color) ){
									return (col-1);
								}
								if ( (((col+2) < 7) & (grid.getRec(col+2, row) = 0)) & ~(grid.getRec(col-1, row) = color) ){
									return (col+2);
								}
							}
						}
					}
				}
				let row = row + 1;		
			}

			let col = col + 1;
		}
		return 7;
	}




	method boolean judgeHor(int col, int row, int c){
		if( ( grid.getRec(col, row) = c ) & ( grid.getRec(col + 1, row) = c )){
			return true;
		}
		else{
			return false;
		}
	}
	
	method boolean judgeVert(int col, int row, int c){
		if( ( grid.getRec(col, row) = c ) & ( grid.getRec(col, row + 1) = c ) ){
			return true;
		}
		else{
			return false;
		}
	}
	
	method boolean judgeDiaLeft(int col, int row, int c){
		if( ( grid.getRec(col, row) = c ) & ( grid.getRec(col - 1, row + 1) = c ) ){
			return true;
		}
		else{
			return false;
		}
	}
	
	method boolean judgeDiaRight(int col, int row, int c){
		if( ( grid.getRec(col, row) = c ) & ( grid.getRec(col + 1, row + 1) = c ) ){
			return true;
		}
		else{
			return false;
		}
	}

	method int PossibleToWin(int c){ //if color p gonna win return its endpoint; otherwise, return 7.
		var int col, row;
		let col = 0;
		while( col < 7 ){
			
			let row = 0;
			while( row < 6 ){
				
				if( grid.getRec(col, row) = c ){
					
					if (col < 6){
						if (judgeHor(col, row, c)){
							if (((col > 0) & ((grid.getRec(col-1, row) = 0))) & (grid.getStack(col-1) = row)){
								return (col-1);
							}
							if ((((col+2) < 7) & ((grid.getRec(col+2, row) = 0))) & (grid.getStack(col+2) = row)){
								return (col+2);
							}
						}
					}

					if (row < 4){
						if (judgeVert(col, row, c)){
							if (((row+1) < 4) & ((grid.getRec(col, row+2) = 0))){
								return col;
							}
						}
					}

					if ((col < 5) & (row < 4)){
						if (judgeDiaRight(col, row, c)){
							if ((((col+1) < 5) & ((row+1) < 4))
								& ((grid.getRec(col+2, row+2) = 0))){
								return (col+2);
							}
						}
					}

					if ((col > 1) & (row > 1)){
						if (judgeDiaLeft(col, row, c)){
							if ((((col-1) > 1) & ((row+1) < 4))
								& ((grid.getRec(col-2, row+2) = 0))){
								return (col-2);
							}
						}
					}
				}

				let row = row + 1;
			}
			
			let col = col + 1;
		}

		return 7;
	}




	method int Win(int c){   //check if the color will win at the next step
		var int col;
		let col = 0;
		while((col < 7)){
			do grid.setTest(1);
			do grid.setRec( col, grid.getStack(col), c );
			do grid.setStack( col, grid.getStack(col) + 1 );
			if (checkWin(c)){
				do grid.setTest(0);
				do grid.setStack( col, grid.getStack(col) - 1 );
				do grid.setRec( col, grid.getStack(col), 0 );
				return col;
			}
			do grid.setTest(0);
			do grid.setStack( col, grid.getStack(col) - 1 );
			do grid.setRec( col, grid.getStack(col), 0 );
						
			let col = col + 1;
		}
			
		return 7;
	}




	method int wannaWin(){
		var int col;
		let col = PossibleToWin(color);
		if ((col < 7)){
			if(ThinkTwice(col)){              //after this step, will the opponent win?
				return col;
			}
		}
		return 7;
	}

	method boolean ThinkTwice(int col){
		var int i;

		do grid.setTest(1);
		do grid.setRec( col, grid.getStack(col), color );
		do grid.setStack( col, grid.getStack(col) + 1 );

		let i = Win(p);
		if (i < 7){
			do grid.setTest(0);
			do grid.setStack( col, grid.getStack(col) - 1 );
			do grid.setRec( col, grid.getStack(col), 0 );
			return false;
		}
		do grid.setTest(0);
		do grid.setStack( col, grid.getStack(col) - 1 );
		do grid.setRec( col, grid.getStack(col), 0 );
		
		return true;
	}




	method boolean checkWin(int p){
		var int col, row;
		do grid.setTest(1);
		let col = 0;
		while( col < 7 ){
			
			let row = 0;
			while( row < 6 ){
				
				if( grid.getRec(col, row) = p ){
					
					if( (col < 3) & (row < 3) ){
						if( (grid.judgeHor(col, row, p)) | (grid.judgeVert(col, row, p)) | (grid.judgeDiaRight(col, row, p)) ){
							do grid.setTest(0);
							return true;
						}
					}
					if( (col = 3) & (row < 3) ){
						if( (grid.judgeHor(col, row, p)) | (grid.judgeVert(col, row, p)) | 
							(grid.judgeDiaRight(col, row, p)) | (grid.judgeDiaLeft(col, row, p)) ){
							do grid.setTest(0);
							return true;
						}
					}
					if( (col > 3) & (row < 3) ){
						if( (grid.judgeVert(col, row, p)) | (grid.judgeDiaLeft(col, row, p)) ){
							do grid.setTest(0);
							return true;
						}
					}
					if( (col < 4) & (row > 2) ){
						if( grid.judgeHor(col, row, p) ){
							do grid.setTest(0);
							return true;
						}
					}
				}
				let row = row + 1;
			}
			
			let col = col + 1;
		}
		
		do grid.setTest(0);
		return false;
	}




	method int nineGrid(){
		var int index, max, i, j, cnt, max_col;
		let max = 0;
		let index = 0;
		while(index < 7){
			let cnt = 0;
			let i = -1;
			while(i < 2){
				if ( ((priority[index]+i) > -1) & ((priority[index]+i) < 7) ){
					let j = -1;
					while(j < 2){
						if ( ((grid.getStack(priority[index])+j) > -1) & ((grid.getStack(priority[index])+j) < 6) ){
							if(grid.getRec(priority[index]+i, grid.getStack(priority[index])+j) = color){
								let cnt = cnt + 1;
							}
						}
						let j = j + 1;
					}
				}
				let i = i + 1;
			}
			if (cnt > max){
				let max = cnt;
				let max_col = priority[index];
			}

			let index = index + 1;
		}

		return max_col;
	}




	method void speak(){
		var int i;
		let i = rand(randseed);
		do Output.moveCursor(9, 50);
		if (i < 5){
			do grid.DrawDialogue(speakCnt);

			if (i = 0){
				do Output.moveCursor(5 + (speakCnt*5), 43);
				do Output.printString("Too Young");
				do Output.moveCursor(6 + (speakCnt*5), 43);
				do Output.printString("    Too Simple~   ");
			}

			if (i = 1){
				do Output.moveCursor(5 + (speakCnt*5), 43);
				do Output.printString("HaHaHa      ");
				do Output.moveCursor(6 + (speakCnt*5), 43);
				do Output.printString("    UCCU~         ");
			}

			if (i = 2){
				do Output.moveCursor(5 + (speakCnt*5), 43);
				do Output.printString("It's easy   ");
				do Output.moveCursor(6 + (speakCnt*5), 43);
				do Output.printString("    Isn't it?     ");
			}

			if (i = 3){
				do Output.moveCursor(5 + (speakCnt*5), 43);
				do Output.printString("Hmmm...     ");
				do Output.moveCursor(6 + (speakCnt*5), 43);
				do Output.printString("    Omoshiroidesu~");
			}

			if (i = 4){
				do Output.moveCursor(5 + (speakCnt*5), 43);
				do Output.printString("Yamero-     ");
				do Output.moveCursor(6 + (speakCnt*5), 43);
				do Output.printString("    Don't do that!");
			}

			let speakCnt = speakCnt + 1;
			if (speakCnt > 2){
				let speakCnt = speakCnt - 3;
			}
		}
		return;
	}



























	method void seedIncrease(){
		let randseed = randseed + 1;
		if (randseed > 6){
			let randseed = randseed - 7;
		}
		do Sys.wait(10);
		return;
	}

	method int rand(int randseed){
		var int i;
		let i = randseed - (randseed / 7);
		while(grid.getStack(priority[i]) > 5){
			let i = i + 1;
			if (i > 6){
				let i = i - 7;
			}
		}
		return priority[i];
	}




/* 一些很有紀念意義的code


	method boolean checkCrash(){
		return AIcrashed;
	}


	method void crashMessage(){
		let AIcrashed = 1;
		do Output.moveCursor(6, 9);
		do Output.printString("Oops! It seems that the AI was Fxxked up");
		return;
	}





	method int Brute_force(){
		var int i, j, k, l, p, temp_ans;
		if (color = 1){
			let p = 2;
		}else{
			let p = 1;
		}

		let temp_ans = 7;
		let i = 0;
		while(i < 7){

			let j = 0;
			while(j < 7){

				let k = 0;
				while(k < 7){

					let l = 0;
					while(l < 7){


						do grid.setTest(1);
						do grid.setRec( i, grid.getStack(i), color );
						do grid.setStack( i, grid.getStack(i) + 1 );
						if (checkWin(color)){
							do grid.setStack( i, grid.getStack(i) - 1 );
							do grid.setRec( i, grid.getStack(i), 0 );
							do grid.setTest(0);
							return i;
						}
						do grid.setRec( j, grid.getStack(j), p );
						do grid.setStack( j, grid.getStack(j) + 1 );
						if (~checkWin(p)){
							do grid.setRec( k, grid.getStack(k), color );
							do grid.setStack( k, grid.getStack(k) + 1 );
							if (checkWin(color)){
								do grid.setStack( i, grid.getStack(i) - 1 );
								do grid.setRec( i, grid.getStack(i), 0 );
								do grid.setStack( j, grid.getStack(j) - 1 );
								do grid.setRec( j, grid.getStack(j), 0 );
								do grid.setStack( k, grid.getStack(k) - 1 );
								do grid.setRec( k, grid.getStack(k), 0 );
								do grid.setTest(0);
								return i;
							}
							do grid.setRec( l, grid.getStack(l), p );
							do grid.setStack( l, grid.getStack(l) + 1 );
							if (~checkWin(p)){
								let temp_ans = i;
							}
							do grid.setStack( i, grid.getStack(i) - 1 );
							do grid.setRec( i, grid.getStack(i), 0 );
							do grid.setStack( j, grid.getStack(j) - 1 );
							do grid.setRec( j, grid.getStack(j), 0 );
							do grid.setStack( k, grid.getStack(k) - 1 );
							do grid.setRec( k, grid.getStack(k), 0 );
							do grid.setStack( l, grid.getStack(l) - 1 );
							do grid.setRec( l, grid.getStack(l), 0 );
							do grid.setTest(0);
						}else{
							do grid.setStack( i, grid.getStack(i) - 1 );
							do grid.setRec( i, grid.getStack(i), 0 );
							do grid.setStack( j, grid.getStack(j) - 1 );
							do grid.setRec( j, grid.getStack(j), 0 );
							do grid.setTest(0);
						}

						do grid.setTest(0);
						let l = l + 1;
					}
					let k = k + 1;
				}
				let j = j + 1;
			}
			let i = i + 1;
		}

		return temp_ans;
	}



*/

}