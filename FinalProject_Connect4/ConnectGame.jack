class ConnectGame{
	field Grid grid;
	field Disc tmp;
	field int current_p, current_col, steps;
	field int currentMode;
	
	constructor ConnectGame new(){
		let grid = Grid.new();
		let current_p = 1;
		let current_col = 3;
		let currentMode = 0;
		let steps = 0;
		let tmp = Disc.new(1);
		
		return this;
	}	
	
	method void play(int gameOption){
		var boolean end;
		let end = 0;
		
		do Screen.clearScreen();
		
		if( gameOption = 1 ){
			do Output.moveCursor(19, 2);
			do Output.printString("Press");
			do Output.moveCursor(20, 4);
			do Output.printString("O: Drop");
			do Output.moveCursor(21, 4);
			do Output.printString("P: Pop-Out");
		}			
		do Output.moveCursor(22, 58);
		do Output.printString("(Q)uit"); 
		
		do grid.drawGrid();
		do drawTurn(current_p);
		do tmp.drawDisc(current_col, 6);
		
		while( (steps < 42) & ( ~(Keyboard.keyPressed() = 81) ) ){ // not tied & (Q) not pressed
			// placing disc
			if( ( currentMode = 0 ) & ( Keyboard.keyPressed() = 133 ) & ( grid.getStack(current_col) < 6 ) ){
				do tmp.eraseDisc(current_col, 6);
				do tmp.drawDisc( current_col, grid.getStack(current_col) );
				do grid.setRec( current_col, grid.getStack(current_col), current_p );
				do grid.setStack( current_col, grid.getStack(current_col) + 1 );
				do tmp.clear();
				
				let steps = steps + 1;
				let current_col = 3;
				
				// win
				if( (steps > 3) & ( checkWin( current_p ) ) ){
					do ConnectGame.winningMessage( current_p );
					let end = true;
					
					while( ~(Keyboard.keyPressed() = 81) ){
						do Sys.wait(20);
					}
				}
				// tied
				if( steps = 42 ){
					do ConnectGame.tiedMessage();
					let end = true;
					
					while( ~(Keyboard.keyPressed() = 81) ){
						do Sys.wait(20);
					}
				}
				
				// otherwise, switch
				if(~end){
					if( current_p = 1 ){
						let current_p = 2;
					}
					else{
						let current_p = 1;
					}
					do Sys.wait(300);
					let tmp = Disc.new(current_p);
					do tmp.drawDisc(current_col, 6);
					do drawTurn(current_p);
				}
			}
			
			// Pop-out disc
			if( ( currentMode = 1 ) & ( Keyboard.keyPressed() = 133 ) & ( grid.getRec(current_col, 0) = current_p ) ){
				do grid.eraseArrow(current_col);
				do tmp.clear();
				do grid.popOut(current_col);
				
				let steps = steps - 1;
				let current_col = 3;
				
				// win
				if(steps > 3){
					if( checkWin(1) ){
						do ConnectGame.winningMessage(1);
						let end = true;
						
						while( ~(Keyboard.keyPressed() = 81) ){
							do Sys.wait(20);
						}
					}
					
					if( checkWin(2) ){
						do ConnectGame.winningMessage(2);
						let end = true;
						
						while( ~(Keyboard.keyPressed() = 81) ){
							do Sys.wait(20);
						}
					}
				}
				
				// otherwise, switch
				if(~end){
					if( current_p = 1 ){
						let current_p = 2;
					}
					else{
						let current_p = 1;
					}
					do Sys.wait(300);
					let currentMode = 0;
					let tmp = Disc.new(current_p);
					do tmp.drawDisc(current_col, 6);
					do drawTurn(current_p);
				}
			}
			
			// change columns
			if( (Keyboard.keyPressed() = 130) & (current_col > 0) ){
				if( currentMode = 0 ){
					do tmp.eraseDisc(current_col, 6);
					do tmp.drawDisc(current_col-1, 6);
				}
				else{
					do grid.eraseArrow(current_col);
					do grid.drawArrow(current_col-1, current_p);
				}
				
				let current_col = current_col-1;
				do Sys.wait(100);
			}
			if( (Keyboard.keyPressed() = 132) & (current_col < 6) ){
				if( currentMode = 0 ){
					do tmp.eraseDisc(current_col, 6);
					do tmp.drawDisc(current_col+1, 6);
				}
				else{
					do grid.eraseArrow(current_col);
					do grid.drawArrow(current_col+1, current_p);
				}
				
				let current_col = current_col+1;
				do Sys.wait(100);
			}
			
			// change to Pop-out mode
			if( gameOption = 1 ){
				if( (Keyboard.keyPressed() = 80) & (currentMode = 0) ){
					let currentMode = 1;
					do grid.drawArrow(current_col, current_p);
					do tmp.eraseDisc(current_col, 6);
					
					do Sys.wait(100);
				}
				if( (Keyboard.keyPressed() = 79) & (currentMode = 1) ){
					let currentMode = 0;
					do grid.eraseArrow(current_col);
					do tmp.drawDisc(current_col, 6);
					
					do Sys.wait(100);
				}
			}		
		}
			
		return;	
	}
	
	method void drawTurn(int p){
		do Screen.setColor(true);
		do Screen.drawRectangle(12, 108, 116, 188);
		do Screen.setColor(false);
		do Screen.drawRectangle(14, 110, 114, 186);
		do Output.moveCursor(11, 5);
		
		if( p = 1 ){
			do Screen.setColor(true);
			do Screen.drawRectangle(16, 112, 112, 184);
			do Screen.setColor(false);
			do Screen.drawRectangle(19, 115, 109, 181);
			
			do Output.printString("Player");
			do Output.moveCursor(13, 5);
			do Output.printString("BLACK's");
			do Output.moveCursor(15, 6);
			do Output.printString("turn");
		}
		else{
			do Output.printString("Player");
			do Output.moveCursor(13, 5);
			do Output.printString("WHITE's");
			do Output.moveCursor(15, 6);
			do Output.printString("turn");
		}
		
		return;
	}
	
	method boolean checkWin(int p){
		var int col, row;
		let col = 0;
		
		while( col < 7 ){
			let row = 0;
			
			while( row < 6 ){
				
				if( grid.getRec(col, row) = p ){
					
					if( (col < 3) & (row < 3) ){
						if( (grid.judgeHor(col, row, p)) | (grid.judgeVert(col, row, p)) | (grid.judgeDiaRight(col, row, p)) ){
							return true;
						}
					}
					if( (col = 3) & (row < 3) ){
						if( (grid.judgeHor(col, row, p)) | (grid.judgeVert(col, row, p)) | 
							(grid.judgeDiaRight(col, row, p)) | (grid.judgeDiaLeft(col, row, p)) ){
							return true;
						}
					}
					if( (col > 3) & (row < 3) ){
						if( (grid.judgeVert(col, row, p)) | (grid.judgeDiaLeft(col, row, p)) ){
							return true;
						}
					}
					if( (col < 4) & (row > 2) ){
						if( grid.judgeHor(col, row, p) ){
							return true;
						}
					}
				}
				let row = row + 1;
			}
			
			let col = col + 1;
		}
		
		return false;
	}
	
	function void winningMessage(int p){
		var int i;
		let i = 6;
		
		do Screen.setColor(false);
		while( i < 87 ){
			do Screen.drawCircle(220, 127, i);
			do Sys.wait(25);
			
			let i = i + 5;
		}
			
		do Output.moveCursor(9, 22);
		if( p = 1 ){
			do Output.printString("Player Black");
		}
		else{
			do Output.printString("Player White");
		}
		do Output.moveCursor(11, 24);
		do Output.printString("WINS!!");
		
		do Output.moveCursor(14, 19);
		do Output.printString("Press Q to go back");
		
		return;
	}
	
	function void tiedMessage(){
		var int i;
		let i = 6;
		
		do Screen.setColor(false);
		while( i < 87 ){
			do Screen.drawCircle(220, 127, i);
			do Sys.wait(25);
			
			let i = i + 5;
		}
		
		do Output.moveCursor(9, 24);
		do Output.printString("Uh, oh!");
		do Output.moveCursor(11, 23);
		do Output.printString("Game TIED");
		
		do Output.moveCursor(14, 19);
		do Output.printString("Press Q to go back");
		
		return;
	}
	
	method void clear(){
		do grid.clear();
		do Memory.deAlloc(this);
		
		return;
	}
}