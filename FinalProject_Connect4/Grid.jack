class Grid{
	field int leftBound, upperBound;
	field int blockSize;
	field Array recCol, stack;
	
	constructor Grid new(){
		var int i, j;
		var Array recRow;
		
		let leftBound = 130;
		let upperBound = 50;
		let blockSize = 26;
		
		let recCol = Array.new(7);
		let stack = Array.new(7);
		
		// initialize record array
		let i = 0;
		while( i < 7 ){
			let stack[i] = 0;
			let recCol[i] = Array.new(6);
			let recRow = recCol[i];

			let j = 0;
			while( j < 6 ){
				let recRow[j] = 0;
				let j = j + 1;
			}
			let i = i + 1;
		}
		
		return this;
	}
	
	method void drawGrid(){
		var int cnt, x, y;
		let cnt = 0;
		
		do Screen.drawLine(128, 50, 128, 208);
		do Screen.drawLine(129, 50, 129, 208);
		while( cnt < 8 ){
			let x = leftBound + (cnt*blockSize);
			do Screen.drawLine(x, 50, x, 206) ;
			let cnt = cnt + 1;
		}
		do Screen.drawLine(313, 50, 313, 208);
		do Screen.drawLine(314, 50, 314, 208);
		
		let cnt = 0;
		while( cnt < 7 ){
			let y = upperBound + (cnt*blockSize);
			do Screen.drawLine(130, y, 312, y);
			let cnt = cnt + 1;
		}
		do Screen.drawLine(128, 207, 314, 207);
		do Screen.drawLine(128, 208, 314, 208);
		
		return;
	}
	
	method int getStack(int col){
		var int ret;
		let ret = stack[col];
		
		return ret;
	}
	
	method void setStack(int col, int top){
		let stack[col] = top;
		return;
	}
	
	method void setRec(int col, int row, int p){
		var Array getRow;
		let getRow = recCol[col];
		let getRow[row] = p;
		return;
	}
	
	method int getRec(int col, int row){
		var Array getRow;
		var int ret;
		let getRow = recCol[col];
		let ret = getRow[row];
		
		return ret;
	}
	
	method boolean judgeHor(int col, int row, int p){
		if( ( getRec(col, row) = p ) & ( getRec(col + 1, row) = p ) &
			( getRec(col + 2, row) = p ) & ( getRec(col + 3, row) = p ) ){
				do Disc.winningAnima(p, col, row, col+1, row, col+2, row, col+3, row );
				return true;
		}
		else{
			return false;
		}
	}
	
	method boolean judgeVert(int col, int row, int p){
		if( ( getRec(col, row) = p ) & ( getRec(col, row + 1) = p ) &
			( getRec(col, row + 2) = p ) & ( getRec(col, row + 3) = p ) ){
				do Disc.winningAnima(p, col, row, col, row+1, col, row+2, col, row+3);
				return true;
		}
		else{
			return false;
		}
	}
	
	method boolean judgeDiaLeft(int col, int row, int p){
		if( ( getRec(col, row) = p ) & ( getRec(col - 1, row + 1) = p ) &
			( getRec(col - 2, row + 2) = p ) & ( getRec(col - 3, row + 3) = p ) ){
				do Disc.winningAnima(p, col, row, col-1, row+1, col-2, row+2, col-3, row+3);
				return true;
		}
		else{
			return false;
		}
	}
	
	method boolean judgeDiaRight(int col, int row, int p){
		if( ( getRec(col, row) = p ) & ( getRec(col + 1, row + 1) = p ) &
			( getRec(col + 2, row + 2) = p ) & ( getRec(col + 3, row + 3) = p ) ){
				do Disc.winningAnima(p, col, row, col+1, row+1, col+2, row+2, col+3, row+3);
				return true;
		}
		else{
			return false;
		}
	}
	
	method void clear(){
		var int col;
		var Array recRow;
		
		let col = 0;
		while( col < 7 ){
			let recRow = recCol[col];
			do recRow.dispose();
			let col = col + 1;
		}
		
		do stack.dispose();
		do Memory.deAlloc(this);
		return;
	}
}